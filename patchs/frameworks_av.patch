#	modified:   frameworks/av/include/media/stagefright/DataSource.h
#	modified:   frameworks/av/media/libstagefright/DataSource.cpp

diff --git a/frameworks/av/include/media/stagefright/DataSource.h b/frameworks/av/include/media/stagefright/DataSource.h
index 24ca89d..c34ceec 100755
--- a/frameworks/av/include/media/stagefright/DataSource.h
+++ b/frameworks/av/include/media/stagefright/DataSource.h
@@ -32,6 +32,7 @@ namespace android {
 
 struct AMessage;
 class String8;
+#ifndef HISILICON_HI3630
 class DataSource;
 
 class Sniffer : public RefBase {
@@ -66,6 +67,7 @@ private:
     Sniffer(const Sniffer &);
     Sniffer &operator=(const Sniffer &);
 };
+#endif
 
 class DataSource : public RefBase {
 public:
@@ -81,8 +83,11 @@ public:
             const char *uri,
             const KeyedVector<String8, String8> *headers = NULL);
 
+#ifndef HISILICON_HI3630
     DataSource() { mSniffer = new Sniffer(); }
-
+#else
+    DataSource() {}
+#endif
     virtual status_t initCheck() const = 0;
 
     virtual ssize_t readAt(off64_t offset, void *data, size_t size) = 0;
@@ -115,6 +120,9 @@ public:
             const sp<DataSource> &source, String8 *mimeType,
             float *confidence, sp<AMessage> *meta);
 
+#ifdef HISILICON_HI3630
+    static void RegisterSniffer(SnifferFunc func);
+#endif
     static void RegisterDefaultSniffers();
 
     // for DRM
@@ -132,9 +140,15 @@ public:
 protected:
     virtual ~DataSource() {}
 
+#ifndef HISILICON_HI3630
     sp<Sniffer> mSniffer;
 
     static void RegisterSniffer_l(SnifferFunc func);
+#else
+private:
+    static Mutex gSnifferMutex;
+    static List<SnifferFunc> gSniffers;
+#endif
 
     DataSource(const DataSource &);
     DataSource &operator=(const DataSource &);
diff --git a/frameworks/av/media/libstagefright/DataSource.cpp b/frameworks/av/media/libstagefright/DataSource.cpp
index d3e02ad..c30ddb7 100755
--- a/frameworks/av/media/libstagefright/DataSource.cpp
+++ b/frameworks/av/media/libstagefright/DataSource.cpp
@@ -36,6 +36,10 @@
 #include "include/ExtendedExtractor.h"
 #endif
 
+#ifdef HISILICON_HI3630
+#include "include/ExtendedExtractor.h"
+#endif
+
 #include "matroska/MatroskaExtractor.h"
 
 #include <media/stagefright/foundation/AMessage.h>
@@ -45,12 +49,16 @@
 #include <utils/String8.h>
 
 #include <cutils/properties.h>
+
+#ifndef HISILICON_HI3630
 #include <cutils/log.h>
 
 #include <dlfcn.h>
+#endif
 
 namespace android {
 
+#ifndef HISILICON_HI3630
 static void *loadExtractorPlugin() {
     void *ret = NULL;
     char lib[PROPERTY_VALUE_MAX];
@@ -64,6 +72,7 @@ static void *loadExtractorPlugin() {
     }
     return ret;
 }
+#endif
 
 bool DataSource::getUInt16(off64_t offset, uint16_t *x) {
     *x = 0;
@@ -125,9 +134,15 @@ status_t DataSource::getSize(off64_t *size) {
 
 ////////////////////////////////////////////////////////////////////////////////
 
+#ifdef HISILICON_HI3630
+Mutex DataSource::gSnifferMutex;
+List<DataSource::SnifferFunc> DataSource::gSniffers;
+#endif
+
 bool DataSource::sniff(
         String8 *mimeType, float *confidence, sp<AMessage> *meta) {
 
+#ifndef HISILICON_HI3630
     return  mSniffer->sniff(this, mimeType, confidence, meta);
 }
 
@@ -156,11 +171,27 @@ bool Sniffer::sniff(
        // Magic value, as set by MediaExtractor when a video container looks incomplete
        forceExtraSniffers = true;
     }
-
+#endif
     *mimeType = "";
     *confidence = 0.0f;
     meta->clear();
 
+#ifdef HISILICON_HI3630
+    Mutex::Autolock autoLock(gSnifferMutex);
+    for (List<SnifferFunc>::iterator it = gSniffers.begin();
+         it != gSniffers.end(); ++it) {
+        String8 newMimeType;
+        float newConfidence;
+        sp<AMessage> newMeta;
+        if ((*it)(this, &newMimeType, &newConfidence, &newMeta)) {
+            if (newConfidence > *confidence) {
+                *mimeType = newMimeType;
+                *confidence = newConfidence;
+                *meta = newMeta;
+            }
+        }
+    }
+#else
     Mutex::Autolock autoLock(mSnifferMutex);
     for (List<SnifferFunc>::iterator it = mSniffers.begin();
          it != mSniffers.end(); ++it) {
@@ -192,10 +223,11 @@ bool Sniffer::sniff(
             }
         }
     }
-
+#endif
     return *confidence > 0.0;
 }
 
+#ifndef HISILICON_HI3630
 void Sniffer::registerSniffer_l(SnifferFunc func) {
 
     for (List<SnifferFunc>::iterator it = mSniffers.begin();
@@ -253,8 +285,44 @@ void Sniffer::registerSnifferPlugin() {
         mExtraSniffers.push_back(plugin->sniff);
     }
 }
+#else
+// static
+void DataSource::RegisterSniffer(SnifferFunc func) {
+    Mutex::Autolock autoLock(gSnifferMutex);
+
+    for (List<SnifferFunc>::iterator it = gSniffers.begin();
+         it != gSniffers.end(); ++it) {
+        if (*it == func) {
+            return;
+        }
+    }
+
+    gSniffers.push_back(func);
+}
 
 // static
+void DataSource::RegisterDefaultSniffers() {
+    RegisterSniffer(SniffMPEG4);
+    RegisterSniffer(SniffMatroska);
+    RegisterSniffer(SniffOgg);
+    RegisterSniffer(SniffWAV);
+    RegisterSniffer(SniffFLAC);
+    RegisterSniffer(SniffAMR);
+    RegisterSniffer(SniffMPEG2TS);
+    RegisterSniffer(SniffMP3);
+    RegisterSniffer(SniffAAC);
+    RegisterSniffer(SniffMPEG2PS);
+    RegisterSniffer(SniffWVM);
+    RegisterSniffer(ExtendedExtractor::Sniff);
+
+    char value[PROPERTY_VALUE_MAX];
+    if (property_get("drm.service.enabled", value, NULL)
+            && (!strcmp(value, "1") || !strcasecmp(value, "true"))) {
+        RegisterSniffer(SniffDRM);
+    }
+}
+#endif
+// static
 sp<DataSource> DataSource::CreateFromURI(
         const char *uri, const KeyedVector<String8, String8> *headers) {
     bool isWidevine = !strncasecmp("widevine://", uri, 11);
